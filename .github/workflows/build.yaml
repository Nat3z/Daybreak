name: Build/release

on:
  push:
    branches:
      - main

jobs:
  release:
    permissions:
      contents: write
    name: Create Github Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: temp-tag
          release_name: ${{ github.event.head_commit.message }}
          draft: true
          prerelease: false

      - name: Output Release URL File
        run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
      - name: Save Release URL File for publish
        uses: actions/upload-artifact@v4
        with:
          name: release_url
          path: release_url.txt

  build:
    permissions:
      contents: write
    runs-on: ${{ matrix.os }}
    needs: [release]
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v1

      - name: Setup Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt install -y protobuf-compiler libssl-dev libudev-dev libasound2-dev

      - name: Install Brew (MacOS)
        if: matrix.os == 'macos-latest'
        uses: Homebrew/actions/setup-homebrew@master

      - name: Install Dependencies (MacOS)
        if: matrix.os == 'macos-latest'
        run: brew install protobuf openssl@3 alsa-lib

      - name: Build Cargo Project
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --release --all-features

      - name: Upload Release (Linux)
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/daybreak
          asset_name: daybreak
          asset_content_type: application/octet-stream

      - name: Upload Release (MacOS)
        if: matrix.os == 'macos-latest'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.release.outputs.upload_url }}
          asset_path: target/release/daybreak
          asset_name: daybreak-macos
          asset_content_type: application/octet-stream
